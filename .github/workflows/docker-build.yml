name: Build & Push Docker Images

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  list_images_job:
    name: Determine Images to Build
    runs-on: ubuntu-latest
    outputs:
      matrix_json_string: ${{ steps.generate_matrix.outputs.matrix_string }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Generate image matrix string
        id: generate_matrix
        run: |
          IMAGES_JSON=$(ls -1 docker/ | grep -v '^$' | jq -R . | jq -cs .)
          echo "matrix_string=${IMAGES_JSON}" >> $GITHUB_OUTPUT
          echo "Generated matrix: ${IMAGES_JSON}"

  build-and-push-images:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: list_images_job
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.list_images_job.outputs.matrix_json_string) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and load test image for ${{ matrix.image }} (amd64)
        uses: docker/build-push-action@v5
        with:
          context: docker/${{ matrix.image }}
          file: docker/${{ matrix.image }}/Dockerfile
          platforms: linux/amd64
          load: true
          tags: ${{ matrix.image }}:test-amd64
          outputs: type=image,name=${{ matrix.image }},oci-mediatypes=true,compression=estargz,force-compression=true,store=true

      - name: Test loaded image ${{ matrix.image }}
        run: |
          echo "Testing image: ${{ matrix.image }}"
          IMAGE_NAME="${{ matrix.image }}"
          TEST_TAG="test-amd64"
          # Default test command assumes the entrypoint binary supports --version or similar
          TEST_CMD="--version"

          # Specific command overrides
          if [ "$IMAGE_NAME" = "dig" ]; then
            TEST_CMD="-v"
          elif [ "$IMAGE_NAME" = "nettools" ]; then
            # For nettools, the entrypoint is netdiag; running without args is the test
            docker run --rm "${IMAGE_NAME}:${TEST_TAG}"
            exit 0 # Exit successfully if docker run completes
          fi

          # General test execution
          docker run --rm "${IMAGE_NAME}:${TEST_TAG}" $TEST_CMD

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: docker/${{ matrix.image }}
          file: docker/${{ matrix.image }}/Dockerfile
          push: true
          platforms: |
            linux/amd64
            linux/arm64
            linux/arm/v7
            linux/s390x
            linux/ppc64le
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:${{ github.sha }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image }}:${{ github.sha }}
